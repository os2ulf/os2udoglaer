<?php

/**
 * @file
 * Primary module hooks for OS2UOL Users module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function os2uol_users_user_access(\Drupal\user\UserInterface $user, $operation, \Drupal\Core\Session\AccountInterface $current_user) {
  $allowed_roles = os2uol_get_public_user_roles();

  // If user has any of the allowed roles, return neutral.
  foreach ($user->getRoles(TRUE) as $role) {
    if (in_array($role, $allowed_roles)) {
      return AccessResult::neutral();
    }
  }

  // If current user does not have permission to view private user information, return forbidden.
  if (!$current_user->hasPermission('view private user information')) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

function os2uol_get_public_user_roles(): array {
  return [
    'course_provider',
    'place_of_visit',
    'corporation',
  ];
}

/**
 * Implements hook_form_alter() to hide the field_roles field for non-admin users.
 */
function os2uol_users_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Get the current user.
  $current_user = \Drupal::currentUser();

  // Define the roles that are allowed to see the field_roles field.
  $allowed_roles = ['administrator', 'webmaster'];

  // Check if the current user has one of the allowed roles.
  $has_allowed_role = FALSE;
  foreach ($allowed_roles as $role) {
    if ($current_user->hasRole($role)) {
      $has_allowed_role = TRUE;
      break;
    }
  }

  // If the user does not have one of the allowed roles, hide the field_roles field.
  if (!$has_allowed_role) {
    if (isset($form['field_roles'])) {
      $form['field_roles']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function os2uol_users_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Check if the view is a Workbench dashboard view.
  if ($view->id() == 'workbench_recent_content') {
    // Get the roles of the current user.
    $roles = \Drupal::currentUser()->getRoles();

    // Check if the user has one of the specified roles.
    if (in_array('administrator', $roles) || in_array('webmaster', $roles) || in_array('editor', $roles)) {
      // If the user has one of the roles, do not alter the query.
      return;
    }

    // Add a join to the 'node_field_data' table.
    $join = Views::pluginManager('join')->createInstance('standard', [
      'table' => 'node_field_data',
      'field' => 'nid',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    ]);
    $query->addRelationship('node_field_data', $join, 'node_field_data');

    // Add a condition to the query to exclude entities of type "page".
    $query->addWhere(0, 'node_field_data.type', 'page', '!=');
  }
}
