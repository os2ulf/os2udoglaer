<?php

/**
 * @file
 * Primary module hooks for OS2UOL Users module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function os2uol_users_user_access(\Drupal\user\UserInterface $user, $operation, \Drupal\Core\Session\AccountInterface $current_user) {
  $has_allowed_role = os2uol_user_has_allowed_role($user);
  $is_on_current_domain = os2uol_user_is_on_current_domain($user);

  // If the user has any of the allowed roles and is on the current domain, return neutral.
  if ($has_allowed_role && $is_on_current_domain) {
    return AccessResult::neutral();
  }

  // If current user does not have permission to view private user information, return forbidden.
  if (!$current_user->hasPermission('view private user information')) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Checks whether the user is on the current domain.
 *
 * @param $user
 *
 * @return bool
 */
function os2uol_user_is_on_current_domain($user): bool {
  /** @var \Drupal\domain\DomainNegotiatorInterface $domain_negotiator */
  $domain_negotiator = \Drupal::service('domain.negotiator');
  $current_domain_id = $domain_negotiator->getActiveId();

  $user_domains = array_column($user->get('field_domain_access')->getValue(), 'target_id');
  return in_array($current_domain_id, $user_domains);
}

/**
 * Checks whether the user has any of the allowed roles.
 *
 * @param $user
 *
 * @return bool
 */
function os2uol_user_has_allowed_role($user): bool {
  $allowed_roles = os2uol_get_public_user_roles();
  $user_roles = $user->getRoles(TRUE);

  return !empty(array_intersect($user_roles, $allowed_roles));
}

function os2uol_get_public_user_roles(): array {
  return [
    'course_provider',
    'place_of_visit',
    'corporation',
    'institution',
    'school',
    'theater_contact'
  ];
}

/**
 * Implements hook_form_alter() to hide the field_roles field for non-admin users.
 */
function os2uol_users_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Get the current user.
  $current_user = \Drupal::currentUser();


  // Check if the current user has the corporation role.
  $has_corporation_role = $current_user->hasRole('corporation');

  // If the user has corporation role, hide the field_guarantee_partner field.
  if ($has_corporation_role) {
    if (isset($form['field_guarantee_partner'])) {
      $form['field_guarantee_partner']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function os2uol_users_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Check if the view is a Workbench dashboard view.
  if ($view->id() == 'workbench_recent_content') {
    // Get the current user.
    $current_user = \Drupal::currentUser();

    // Get the roles of the current user.
    $roles = $current_user->getRoles();

    // Check if the user has the 'administrator', 'webmaster', or 'editor' role.
    if (in_array('administrator', $roles) || in_array('webmaster', $roles) || in_array('editor', $roles)) {
      // If the user has any of these roles, do not alter the query.
      return;
    }

    // Add a join to the 'node_field_data' table.
    $join = Views::pluginManager('join')->createInstance('standard', [
      'table' => 'node_field_data',
      'field' => 'nid',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
    ]);
    $query->addRelationship('node_field_data', $join, 'node_field_data');

    // Add a condition to the query to exclude entities of type "page".
    $query->addWhere(0, 'node_field_data.type', 'page', '!=');

    // Add a condition to the query to only include nodes where the author (uid) is the current user.
    $query->addWhere(0, 'node_field_data.uid', $current_user->id());
  }
}
