<?php

use Drupal\transform_api\Transform\EntityTransform;
use Drupal\transform_api_responsive_image\Plugin\Transform\Field\ResponsiveImageTransform;
use Drupal\transform_api_views\Transform\ViewTransform;

function os2uol_transform_plugins_block_content_transform_alter(&$transformation) {
  if (empty($transformation)) {
    return;
  }
  // Set block content entity variable.
  $block_content = $transformation['#entity'];

  if ($transformation['bundle'] == 'appetizer') {

    $transform_mode = 'small';
    if ($transformation['field_appetizer_image']->getValue('transform_mode') === 'width_100') {
      $transform_mode = 'default';
    }

    $transformation['appetizer_size'] = $transform_mode;
  }

  if ($transformation['bundle'] == 'image') {
    if ($block_content->get('field_dynamic_height')->value) {
      $field_transform = $transformation['field_image_media']->getFieldTransform();

      if ($field_transform instanceof ResponsiveImageTransform) {
        $responsive_image_style = 'isg_image_dynamic_width_100';

        // Check transform mode and set image style accordingly.
        if ($transformation['field_image_media']->getValue('transform_mode') === 'width_33') {
          $responsive_image_style = 'isg_image_dynamic_width_33';
        } elseif ($transformation['field_image_media']->getValue('transform_mode') === 'width_50') {
          $responsive_image_style = 'isg_image_dynamic_width_50';
        } elseif ($transformation['field_image_media']->getValue('transform_mode') === 'width_66') {
          $responsive_image_style = 'isg_image_dynamic_width_66';
        }

        $field_transform->setSetting('responsive_image_style', $responsive_image_style);
      }
    }
  }

  if ($transformation['bundle'] == 'application_form') {
    $node = \Drupal::routeMatch()->getParameter('node');
    // Get the field_domain_access values.
    $domain_access_array = $node->get('field_domain_access');
    $domain_array = [];
    foreach ($domain_access_array as $domain_access) {
      $domain_array[] = $domain_access->getString();
    }
    $transformation['field_domain_access'] = $domain_array;
  }
}

function os2uol_transform_plugins_node_transform_alter(&$transformation) {
  if (empty($transformation)) {
    return;
  }
  // Check if user role is provider.
  if ($transformation['#entity']->get('uid')->entity->hasRole('course_provider')) {
    // Add user transform object to transformation.
    $transformation['provider'] = EntityTransform::createFromEntity($transformation['#entity']->get('uid')->entity, 'courses');
  }
  // Check if user role is provider.
  if ($transformation['#entity']->get('uid')->entity->hasRole('corporation')) {
    // Add user transform object to transformation.
    $transformation['corporation'] = EntityTransform::createFromEntity($transformation['#entity']->get('uid')->entity, 'courses');
  }
  // Add entity link to transformation.
  $transformation['link'] = $transformation['#entity']->toUrl()->toString();
  // Add entity bundle label to transformation.
  $transformation['bundle_label'] = $transformation['#entity']->type->entity->label();
  // Add created date formatted with os2date to transformation.
  $transformation['created'] = \Drupal::service('date.formatter')->format($transformation['#entity']->get('created')->value, 'os2date');

  // Check if transformation is full and set is_frontpage variable if current page is set as frontpage.
  if ($transformation['transform_mode'] === 'full') {
    if (\Drupal::config('system.site')->get('page.front') === '/node/' . $transformation['#entity']->id()) {
      $transformation['is_frontpage'] = TRUE;
    } else {
      $transformation['is_frontpage'] = FALSE;
    }
  }
}

function os2uol_transform_plugins_user_transform_alter(&$transformation) {
  if (empty($transformation)) {
    return;
  }
  // Add user profile link and user roles to transformation.
  $transformation['link'] = $transformation['#entity']->toUrl()->toString();
  $transformation['roles'] = $transformation['#entity']->getRoles();

  if ($transformation['transform_mode'] == 'default') {
    // Add related content
    $transformation['related_content'] = new ViewTransform('related_content', 'block_1');
  }
}

function os2uol_transform_plugins_view_latest_news_block_1_transform_alter(&$transformation) {
  if (empty($transformation)) {
    return;
  }
  $transformation['entity_type'] = 'block_content';
  $transformation['bundle'] = $transformation['view_id'];
}

/**
 * Implements hook_HOOK_transform_alter().
 */
function os2uol_transform_plugins_view_content_search_transform_alter(&$transformation) {
  if (!str_starts_with($transformation['display_id'], 'block_')) {
    return;
  }
  $transformation['entity_type'] = 'block_content';
  $transformation['bundle'] = $transformation['view_id'];
}

/**
 * Implements hook_HOOK_transform_alter().
 */
function os2uol_transform_plugins_view_course_providers_transform_alter(&$transformation) {
  if (!str_starts_with($transformation['display_id'], 'block_')) {
    return;
  }
  $transformation['entity_type'] = 'block_content';
  $transformation['bundle'] = $transformation['view_id'];
}

/**
 * Implements hook_HOOK_transform_alter().
 */
function os2uol_transform_plugins_view_transform_alter(&$transformation) {
  if (!empty($transformation['exposed_filters']['sort_by'])) {
    $transformation['exposed_filters']['sort_by']['default_value'] = $transformation['exposed_filters']['sort_by']['value'];
    unset($transformation['exposed_filters']['sort_by']['value']);
  }
}

/**
 * Implements hook_views_post_build().
 */
function os2uol_transform_plugins_views_post_build(\Drupal\views\ViewExecutable $view): void {
  if ($view->id() == 'related_content') {
    $options = $view->exposed_widgets['target_group']['#options'];

    foreach ($options as $key => $option) {
      if ($key == 'All') {
        continue;
      }

      $new_option = t('Progress to @option', ['@option' => strtolower($option)]);

      $view->exposed_widgets['target_group']['#options'][$key] = $new_option;
    }
  }
}
