<?php

use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AccountInterface;
use Drupal\os2uol_pretix\PretixEntityHooks;

/**
 * Implements hook_locale_translation_projects_alter().
 */
function os2uol_pretix_locale_translation_projects_alter(&$projects) {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('os2uol_pretix')->getPath();
  $projects['os2uol_pretix']['info']['interface translation server pattern'] = $path . '/translations/%language.po';
}

/**
 * Implements hook_entity_access().
 */
function os2uol_pretix_entity_access(EntityInterface $entity, $operation, AccountInterface $account): AccessResultInterface {
  return \Drupal::classResolver(PretixEntityHooks::class)
    ->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_entity_delete().
 */
function os2uol_pretix_entity_delete(EntityInterface $entity): void {
  \Drupal::classResolver(PretixEntityHooks::class)
    ->entityDelete($entity);
}

/**
 * Implements hook_entity_insert().
 */
function os2uol_pretix_entity_insert(EntityInterface $entity): void {
  \Drupal::classResolver(PretixEntityHooks::class)
    ->entityInsert($entity);
}

/**
 * Implements hook_entity_update().
 */
function os2uol_pretix_entity_update(EntityInterface $entity): void {
  \Drupal::classResolver(PretixEntityHooks::class)
    ->entityUpdate($entity);
}

/**
 * Implements hook_entity_type_build().
 */
function os2uol_pretix_entity_type_build(array &$entity_types): void {
  \Drupal::classResolver(PretixEntityHooks::class)
    ->entityTypeBuild($entity_types);
}

/**
 * Implements hook_mail().
 */
function os2uol_pretix_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $message['body'][] = Markup::create($params['content']);
  $message['subject'] = str_replace(["\r", "\n"], '', $params['subject']);
}

/**
 * Implements hook_element_info_alter().
 */
function os2uol_pretix_element_info_alter(array &$types) {
  // Add the custom process function to datetime fields.
  $types['datetime']['#process'][] = 'os2uol_pretix_process_element';
}

/**
 * Custom process callback for datetime fields.
 */
function os2uol_pretix_process_element($element) {
  // Only alter fields where the "hide seconds" is enabled.
  if (!empty($element['#datetimehideseconds']['hide'])) {
    // Adjust the element's time format to exclude seconds.
    $element['time']['#attributes']['title'] = t('Enter a valid time - e.g. @format', [
      '@format' => (new \DateTime())->format('H:i'),
    ]);

    if ($element['#date_time_element'] !== 'none') {
      $element['#date_time_format'] = 'H:i';
    }

    if (!empty($element['time']['#value'])) {
      $parts = explode(':', $element['time']['#value']);
      $parts = array_splice($parts, 0, 2); // Keep only hours and minutes.
      $element['time']['#value'] = implode(':', $parts);
    }

    // Remove seconds from browsers that support HTML5 type=date.
    $element['time']['#attributes']['step'] = 60;
  }

  return $element;
}

/**
 * Implements hook_form_alter().
 */
function os2uol_pretix_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add the form IDs for course, course_educators, internship, and subevent edit.
  $applicable_form_ids = [
    'node_course_pretix_add_form_form',
    'node_course_educators_pretix_add_form_form',
    'node_internship_pretix_add_form_form',
    'os2uol_pretix.subevent.edit',
  ];

  if (in_array($form_id, $applicable_form_ids)) {
    // Add the 'hide seconds' functionality to date fields.
    foreach (['date_from', 'date_to', 'presale_start', 'presale_end'] as $field) {
      if (isset($form[$field])) {
        $form[$field]['#datetimehideseconds']['hide'] = TRUE;
      }
    }
  }
}


/**
 * Implements hook_field_widget_form_alter().
 */
function os2uol_pretix_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Ensure the datetimehideseconds functionality is applied for hiding seconds.
  if (!empty($context['widget']->getThirdPartySetting('datetimehideseconds', 'hide'))) {
    $element['value']['#datetimehideseconds']['hide'] = TRUE;
    if (isset($element['end_value'])) {
      $element['end_value']['#datetimehideseconds']['hide'] = TRUE;
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function os2uol_pretix_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Ensure the datetimehideseconds functionality is applied for hiding seconds.
  if (isset($element['#field_name']) && in_array($element['#field_name'], ['date_from', 'date_to', 'presale_start', 'presale_end'])) {
    $element['value']['#datetimehideseconds']['hide'] = TRUE;

    // Ensure step attribute is set to avoid seconds.
    $element['value']['#attributes']['step'] = 60;

    if (isset($element['end_value'])) {
      $element['end_value']['#datetimehideseconds']['hide'] = TRUE;
      $element['end_value']['#attributes']['step'] = 60;
    }
  }
}

/**
 * Implements hook_search_node_filtered_item_alter().
 */
function os2uol_pretix_search_node_filtered_item_alter(&$filteredItem) {
  if (isset($filteredItem['nid'])) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($filteredItem['nid']);
    if ($node && isset($node->pretix['data']['available']) && FALSE === $node->pretix['data']['available']) {
      $filteredItem['ribbon_message'] = t('Sold out');
      $filteredItem['ribbon_class_names'] = ['warning'];
    }
  }
}

/**
 * Implements hook_clone_node_alter().
 * Turn off Pretix on cloned nodes.
 */
function os2uol_pretix_clone_node_alter(&$data, $context) {
  if (in_array($context['original_node']->bundle(), ['course', 'course_educators', 'internship'])) {
    $data->field_pretix_enable['und']['0']['value'] = FALSE;
    $data->field_pretix_show_widget_from = [];
    $data->field_pretix_synchronize['und']['0']['value'] = TRUE;
    $data->field_pretix_date = [];
    $data->field_pretix_email_recipient = [];
  }
}

/**
 * Implements hook_node_insert(), hook_node_update(), and hook_node_delete().
 * Synchronize Pretix events with nodes.
 */
function os2uol_pretix_node_insert($node) {
  _os2uol_pretix_synchronize_pretix_event($node);
}

function os2uol_pretix_node_update($node) {
  _os2uol_pretix_synchronize_pretix_event($node);
}

function os2uol_pretix_node_delete($node) {
  /** @var \Drupal\os2uol_pretix\PretixEventManager $eventManager */
  $eventManager = \Drupal::service('os2uol_pretix.event_manager');
  if ($eventManager->isPretixEventEntity($node)) {
    $result = $eventManager->deleteEvent($node);
    if (isset($result['error'])) {
      \Drupal::messenger()->addError(t('The event could not be deleted in Pretix (%message).', ['%message' => $result['error']]));
    } else {
      \Drupal::messenger()->addStatus(t('The event was successfully deleted from Pretix.'));
    }
  }
}

function os2uol_pretix_node_transform_alter(&$transformation) {
  if (empty($transformation)) {
    return;
  }

  /** @var \Drupal\os2uol_pretix\PretixEventManager $pretix_event_manager */
  $pretix_event_manager = \Drupal::service('os2uol_pretix.event_manager');
  /** @var \Drupal\node\Entity\Node $entity */
  $entity = $transformation['#entity'];

  // Check if field_pretix_shop_url is populated or if the entity is a Pretix event
  if ($pretix_event_manager->hasPretixShopURL($entity)) {
    if ($transformation['transform_mode'] == 'full') {
      $transformation['event_shop_url'] = $pretix_event_manager->getEventShopUrl($entity);
    }
    if ($pretix_event_manager->isPretixEventEntity($entity)) {
      $transformation['sales_banner'] = [
        '#lazy_transformer' => [
          'os2uol_pretix.banner_manager:transformBanner', [
            $entity->getEntityTypeId(),
            $entity->id()
          ]
        ]
      ];
    }
  }
  if (!isset($transformation['sales_banner']) && $pretix_event_manager->isEntityWithBanner($entity)) {
    /** @var \Drupal\os2uol_pretix\PretixBannerManager $pretix_banner_manager */
    $pretix_banner_manager = \Drupal::service('os2uol_pretix.banner_manager');
    $transformation['sales_banner'] = $pretix_banner_manager->getBannerQuick($entity);
  }
}

/**
 * Implements hook_cron().
 */
function os2uol_pretix_cron() {
  /** @var \Drupal\os2uol_pretix\PretixBannerManager $bannerManager */
  $bannerManager = \Drupal::service('os2uol_pretix.banner_manager');
  $bannerManager->processQueue();
}

/**
 * Implements hook_pretix_event_changed().
 */
function os2uol_pretix_pretix_event_changed(EntityInterface $entity) {
  /** @var \Drupal\os2uol_pretix\PretixBannerManager $bannerManager */
  $bannerManager = \Drupal::service('os2uol_pretix.banner_manager');
  $bannerManager->addEntityToQueue($entity);
}

/**
 * Implements hook_token_info().
 */
function os2uol_pretix_token_info() {
  $info = array();

  $info['types'] = array(
    'pretix_order' => array(
      'name' => t('Pretix order'),
      'description' => t('Pretix order tokens.'),
      'needs-data' => 'pretix_order',
    ),
    'pretix_order_line' => array(
      'name' => t('Pretix order line'),
      'description' => t('Pretix order line tokens.'),
      'needs-data' => 'pretix_order_line',
    ),
    'pretix_question' => array(
      'name' => t('Pretix question'),
      'description' => t('Pretix question tokens.'),
      'needs-data' => 'pretix_question',
    ),
  );

  $info['tokens'] = array(
    'pretix_order' => [
      'code' => [
        'name' => t('Code'),
        'description' => t('Code for the Pretix order.'),
      ],
      'email' => [
        'name' => t('Email'),
        'description' => t('The customer email address.'),
      ],
      'phone' => [
        'name' => t('Phone'),
        'description' => t('The customer phone number.'),
      ],
      'datetime' => [
        'name' => t('Order creation date'),
        'description' => t('Time of order creation.'),
      ],
      'lines' => [
        'name' => t('Pretix order lines'),
        'description' => t('Order lines for the Pretix order.'),
      ],
    ],
    'pretix_order_line' => [
      'line_number' => [
        'name' => t('Line number'),
        'description' => t('The line number in the order.'),
      ],
      'name' => [
        'name' => t('Name'),
        'description' => t('The sub-event’s start name.'),
      ],
      'date_from' => [
        'name' => t('Date from'),
        'description' => t('The sub-event’s start date.'),
      ],
      'date_to' => [
        'name' => t('Date to'),
        'description' => t('The sub-event’s end date.'),
      ],
      'presale_start' => [
        'name' => t('Presale start'),
        'description' => t('The sub-date at which the ticket shop opens.'),
      ],
      'presale_end' => [
        'name' => t('Presale end'),
        'description' => t('The sub-date at which the ticket shop closes.'),
      ],
      'quantity' => [
        'name' => t('Quantity'),
        'description' => t('The number of items in the order line.'),
      ],
      'availability' => [
        'name' => t('Availability'),
        'description' => t('The availability of the sub-event.'),
      ],
      'item_price' => [
        'name' => t('Item price'),
        'description' => t('Price of this order line.'),
      ],
      'total_price' => [
        'name' => t('Total price'),
        'description' => t('Total price of this order line.'),
      ],
      'questions' => [
        'name' => t('Questions'),
        'description' => t('Answers to user-defined questions.'),
      ],
    ],
    'pretix_question' => [
      'id' => [
        'name' => t('ID'),
        'description' => t('Internal ID of the question.'),
      ],
      'question_identifier' => [
        'name' => t('Identifier'),
        'description' => t('An arbitrary string that can be used for matching with other sources.'),
      ],
      'question' => [
        'name' => t('Question'),
        'description' => t('The field label shown to the customer.'),
      ],
      'answer' => [
        'name' => t('Answer'),
        'description' => t('Text representation of the answer.'),
      ],
    ],
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function os2uol_pretix_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  switch ($type) {
    case 'pretix_order':
      $order = $data['pretix_order'];

      // Fetch each token and process it.
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'lines':
            $config = \Drupal::config('os2uol_settings.settings');
            $bubbleable_metadata->addCacheableDependency($config);
            $template = $config->get('pretix_order_line')['value'] ?? '';
            $token = \Drupal::token();
            /** @var \Drupal\os2uol_pretix\PretixOrderManager $orderManager */
            $orderManager = \Drupal::service('os2uol_pretix.order_manager');

            $orderLines = $orderManager->getOrderLines($order);
            $markups = [];
            foreach ($orderLines as $orderLine) {
              $markups[] = $token->replace($template, [
                'node' => $data['node'],
                'user' => $data['user'],
                'pretix_order_line' => $orderLine
              ]);
            }
            $markup = implode("\n", $markups);

            // Convert newlines to <br> tags to preserve formatting in HTML.
            $markup = nl2br($markup, FALSE);

            // Markup the order lines to be treated as safe HTML.
            $replacements[$original] = Markup::create($markup);
            break;

          case 'datetime':
            /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
            $dateFormatter = \Drupal::service('date.formatter');

            if (!empty($order[$name])) {
              $datetime = new DrupalDateTime($order[$name]);
              $replacements[$original] = $dateFormatter->format($datetime->getTimestamp(), 'short');
            } else {
              $replacements[$original] = '';
            }
            break;

          default:
            $replacements[$original] = $order[$name];
            break;
        }
      }
      break;

    case 'pretix_order_line':
      $order_line = $data['pretix_order_line'];

      // Fetch each token and process it.
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'name':
            $replacements[$original] = $order_line[$name]['da'] ?? $order_line[$name][array_key_first($order_line[$name])] ?? '';
            break;

          case 'date_from':
          case 'date_to':
          case 'presale_start':
          case 'presale_end':
            /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
            $dateFormatter = \Drupal::service('date.formatter');

            if ($order_line[$name] instanceof DrupalDateTime) {
              $replacements[$original] = $dateFormatter->format($order_line[$name]->getTimestamp(), 'short');
            } else {
              $replacements[$original] = '';
            }
            break;

          case 'item_price':
          case 'total_price':
            $replacements[$original] = number_format($order_line[$name], 2);
            break;

          case 'availability':
            $markups = [];
            foreach ($order_line['quotas'] as $quota) {
              $markups[] = t('@count of @total', ['@name' => $quota['name'], '@count' => $quota['availability']['available_number'], '@total' => $quota['availability']['total_size']])->__toString();
            }
            $markup = implode("\n", $markups);

            // Convert newlines to <br> tags to preserve formatting in HTML.
            //$markup = nl2br($markup, FALSE);

            // Markup the order lines to be treated as safe HTML.
            $replacements[$original] = Markup::create($markup);
            break;

          case 'questions':
            $config = \Drupal::config('os2uol_settings.settings');
            $bubbleable_metadata->addCacheableDependency($config);
            $template = $config->get('pretix_question')['value'] ?? '';
            $token = \Drupal::token();
            /** @var \Drupal\os2uol_pretix\PretixOrderManager $orderManager */
            $orderManager = \Drupal::service('os2uol_pretix.order_manager');

            $questions = $orderManager->getQuestions($data['node']);
            $markups = [];
            foreach ($order_line['answers'] as $question) {
              $pretix_question = $question;
              $pretix_question['question'] = $questions[$question['question']];
              $markups[] = $token->replace($template, [
                'node' => $data['node'],
                'user' => $data['user'],
                'pretix_question' => $pretix_question
              ]);
            }
            $markup = implode("\n", $markups);

            // Convert newlines to <br> tags to preserve formatting in HTML.
            //$markup = nl2br($markup, FALSE);

            // Markup the order lines to be treated as safe HTML.
            $replacements[$original] = Markup::create($markup);
            break;

          default:
            $replacements[$original] = $order_line[$name];
            break;
        }
      }
      break;

    case 'pretix_question':
      $order = $data['pretix_question'];

      // Fetch each token and process it.
      foreach ($tokens as $name => $original) {
        switch ($name) {
          default:
            $replacements[$original] = $order[$name];
            break;
        }
      }
      break;
  }
  return $replacements;
}

/**
 * Synchronize Pretix event with node.
 *
 * @param object $node
 *   The node.
 */
function _os2uol_pretix_synchronize_pretix_event($node) {
  if (!$node->hasField('field_pretix_enable') || $node->get('field_pretix_enable')->value !== TRUE) {
    return;
  }
  $helper = \Drupal::service('os2uol_pretix.event_helper');
  if ($helper->isPretixEventNode($node)) {
    $result = $helper->synchronizePretixEvent($node);
    if ($helper->isError($result)) {
      \Drupal::messenger()->addError(t('There was a problem updating the event in Pretix. Please verify in Pretix that all settings for the event are correct.'));
    } else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      \Drupal::messenger()->addStatus(t('Successfully updated <a href="@pretix_event_url">the event in Pretix</a>.', ['@pretix_event_url' => $pretix_event_url]));
      $live = $node->status;
      $result = $helper->setEventLive($node, $live);
      if ($helper->isError($result)) {
        $data = $helper->getErrorData($result);
        $errors = isset($data->live) ? implode('; ', $data->live) : NULL;
        $message = $live
          ? t('Error setting <a href="@pretix_event_url">the Pretix event</a> live: @errors', ['@pretix_event_url' => $pretix_event_url, '@errors' => $errors])
          : t('Error setting <a href="@pretix_event_url">the Pretix event</a> not live: @errors', ['@pretix_event_url' => $pretix_event_url, '@errors' => $errors]);
        \Drupal::messenger()->addError($message);
      } else {
        $message = $live
          ? t('Successfully set <a href="@pretix_event_url">the Pretix event</a> live.', ['@pretix_event_url' => $pretix_event_url])
          : t('Successfully set <a href="@pretix_event_url">the Pretix event</a> not live.', ['@pretix_event_url' => $pretix_event_url]);
        \Drupal::messenger()->addStatus($message);
      }
    }
  }
}
