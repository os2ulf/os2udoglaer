<?php

/**
 * @file
 * Code for the Ulf pretix feature.
 */

include_once 'ulf_pretix.features.inc';
include_once 'ulf_pretix.permissions.inc';
include_once 'ulf_pretix.form_alterations.inc';

use Drupal\ulf_pretix\Pretix\EventHelper;
use Drupal\ulf_pretix\Pretix\Mailer;
use Drupal\ulf_pretix\Controller\WebhookController;

/**
 * Implements hook_menu().
 */
function ulf_pretix_menu() {
  $items = [];

  $items['admin/config/services/pretix'] = [
    'title' => 'pretix settings',
    'description' => 'Settings and defaults for pretix integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ulf_pretix_admin_settings_form'],
    'access arguments' => ['administer ulf pretix settings'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/ulf_pretix.admin.inc',
  ];

  $items['ulf_pretix/pretix/webhook/%'] = [
    'title' => 'pretix webhook',
    'description' => 'callback endpoint for pretix webhook',
    'access callback' => TRUE,
    'page callback' => 'ulf_pretix_webhook',
    'page arguments' => [3],
    'delivery callback' => 'ulf_pretix_deliver_json',
  ];

  return $items;
}

/**
 * Deliver JSON result.
 *
 * @param mixed $result
 *   The result.
 */
function ulf_pretix_deliver_json($result) {
  drupal_json_output($result);
  exit;
}

/**
 * Menu callback.
 *
 * @param string $organizer_slug
 *   The organizer slug.
 *
 * @return array
 *   The result.
 */
function ulf_pretix_webhook($organizer_slug) {
  try {
    $controller = WebhookController::create();
    return $controller->handle($organizer_slug);
  }
  catch (\Exception $exception) {
    return [
      'error' => [
        'code' => $exception->getCode(),
        'message' => $exception->getMessage(),
      ],
    ];
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ulf_pretix_field_formatter_info() {
  return [
    'ulf_pretix_default' => [
      'label' => t('Default'),
      'field types' => [
        'ulf_pretix_ticket_link',
      ],
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function ulf_pretix_node_insert($node) {
  _ulf_synchronize_pretix_event($node);
}

/**
 * Implements hook_node_update().
 */
function ulf_pretix_node_update($node) {
  _ulf_synchronize_pretix_event($node);
}

/**
 * Synchronize pretix event with node.
 *
 * @param object $node
 *   The node.
 */
function _ulf_synchronize_pretix_event($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  if (!isset($wrapper->field_pretix_enable) || TRUE !== $wrapper->field_pretix_enable->value()) {
    return;
  }
  $helper = EventHelper::create();
  if ($helper->isPretixEventNode($node)) {
    $result = $helper->syncronizePretixEvent($node);
    if ($helper->isError($result)) {
      drupal_set_message(t('There was a problem updating the event in pretix. Please verify in pretix that all settings for the event are correct.'), 'error');
    }
    else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      drupal_set_message(t('Successfully updated <a href="@pretix_event_url">the event in pretix</a>.', [
        '@pretix_event_url' => $pretix_event_url,
      ]), 'status', FALSE);

      $live = $node->status;
      $result = $helper->setEventLive($node, $live);
      if ($helper->isError($result)) {
        $data = $helper->getErrorData($result);
        $errors = isset($data->live) ? implode('; ', $data->live) : NULL;
        $message = $live
          ? t('Error setting <a href="@pretix_event_url">the pretix event</a> live: @errors', [
            '@pretix_event_url' => $pretix_event_url,
            '@errors' => $errors,
          ])
          : t('Error setting <a href="@pretix_event_url">the pretix event</a> not live: @errors', [
            '@pretix_event_url' => $pretix_event_url,
            '@errors' => $errors,
          ]);
        drupal_set_message($message, 'error', FALSE);
      }
      else {
        $message = $live
          ? t('Successfully set <a href="@pretix_event_url">the pretix event</a> live.', [
            '@pretix_event_url' => $pretix_event_url,
          ])
          : t('Successfully set <a href="@pretix_event_url">the pretix event</a> not live.', [
            '@pretix_event_url' => $pretix_event_url,
          ]);
        drupal_set_message($message, 'status', FALSE);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ulf_pretix_node_delete($node) {
  $helper = EventHelper::create();
  if ($helper->isPretixEventNode($node)) {
    $result = $helper->deletePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('The event could not be deleted in pretix (%message).', [
        '%message' => $result['error'],
      ]), 'error');
    }
    else {
      drupal_set_message(t('The event was successfully deleted from pretix.'));
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ulf_pretix_node_load($nodes, $types) {
  if (array_intersect(EventHelper::PRETIX_CONTENT_TYPES, $types)) {
    $helper = EventHelper::create();
    $helper->setPretixEventInfo($nodes);
  }
}

/**
 * Implements hook_theme().
 */
function ulf_pretix_theme() {
  $theme['node__pretix_info'] = [
    'path' => drupal_get_path('module', 'ulf_pretix') . '/templates',
    'template' => 'node--pretix-info',
    'variables' => [
      'node' => NULL,
      'pretix_info' => NULL,
      'pretix_urls' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_preprocees_node().
 */
function ulf_pretix_preprocess_node(&$variables) {
  if (!in_array($variables['type'], EventHelper::PRETIX_CONTENT_TYPES, TRUE)) {
    return;
  }

  // Check if we should show a pretix shop widget.
  $widgetNode = node_load($variables['nid']);
  // We may have to show widget from another node.
  $wrapper = entity_metadata_wrapper('node', $widgetNode);
  if (!empty($wrapper->field_pretix_show_widget_from->value())) {
    $widgetNode = $wrapper->field_pretix_show_widget_from->value();
    $wrapper = entity_metadata_wrapper('node', $widgetNode->nid);
  }
  $view_mode = $variables['view_mode'] ?? NULL;
  if (!empty($widgetNode->pretix['data']) && TRUE === $wrapper->field_pretix_enable->value()) {
    if ('print' === $view_mode) {
      // Pull in the field from the widget node.
      $variables['content']['field_pretix_date'] = field_view_field('node', $widgetNode, 'field_pretix_date');
    }
    else {
      // Don't show pretix dates on regular pages.
      unset($variables['content']['field_pretix_date']);

      // Render the pretix widget if event is live.
      $data = $widgetNode->pretix['data'];
      if (TRUE === $data['event']['live']
        && isset($data['pretix_url'],
          $data['pretix_organizer_slug'],
          $data['pretix_event_slug'],
          $data['event']['live'])) {
        $event_url = $data['pretix_url'] . '/' . $data['pretix_organizer_slug'] . '/' . $data['pretix_event_slug'] . '/';
        $widget_css_url = $event_url . 'widget/v1.css';
        $widget_js_url = $data['pretix_url'] . '/widget/v1.da.js';
        $widget_type = ($wrapper->__isset('field_pretix_widget') && $wrapper->field_pretix_widget->value()) ? ' style="'.$wrapper->field_pretix_widget->value().'"' : '';

        drupal_add_css(drupal_get_path('module', 'ulf_pretix') . '/css/ulf_pretix.css');
        $variables['pretix_widget'] = pretixWidget($widget_css_url, $widget_js_url, $event_url, $widget_type);
      }
      else {
        $variables['pretix_widget'] = NULL;
      }
    }
  }

  if (!empty($widgetNode->field_pretix_event_url[LANGUAGE_NONE][0]['value'])) {
    $event_url = $widgetNode->field_pretix_event_url[LANGUAGE_NONE][0]['value'];
    $widget_css_url = $event_url . 'widget/v1.css';
    $widget_js_url = 'https://pretix.eu/widget/v1.da.js';
    $widget_type = ($wrapper->__isset('field_pretix_widget') && $wrapper->field_pretix_widget->value()) ? ' style="'.$wrapper->field_pretix_widget->value().'"' : '';

    drupal_add_css(drupal_get_path('module', 'ulf_pretix') . '/css/ulf_pretix.css');
    $variables['pretix_widget'] = pretixWidget($widget_css_url, $widget_js_url, $event_url, $widget_type);
  }

  if (isset($variables['node'])) {
    if(!empty($wrapper) && isset($wrapper->nid)) {
      $node = node_load($wrapper->nid->value());
    } else {
      $node = $variables['node'];
    }

    if (isset($node->pretix['data']['available']) && FALSE === $node->pretix['data']['available']) {
      $variables['ribbon_message'] = t('Sold out');
      $variables['ribbon_class_names'] = ['warning'];
    }
  }
}

/**
 * @param string $widget_css_url
 * @param string $widget_js_url
 * @param $event_url
 * @param string $widget_type
 * @param $variables
 *
 * @return mixed
 */
function pretixWidget(string $widget_css_url, string $widget_js_url, $event_url, string $widget_type) {
  return [
    'stylesheet' => '<link rel="stylesheet" type="text/css" href="' . $widget_css_url . '">',
    'javascript' => '<script type="text/javascript" src="' . $widget_js_url . '" async></script>',
    'widget' => '<pretix-widget event="' . $event_url . '"' . $widget_type . ' disable-vouchers></pretix-widget>',
    'noscript' => '<noscript><div class="pretix-widget"><div class="pretix-widget-info-message">'
      . t('<JavaScr></JavaScr>ipt deactivated. Go to <a target="_blank" rel="noopener" href="@event_url">@event_url</a> to buy tickets.', ['@event_url' => $event_url])
      . '</div></div></noscript>',
  ];
}

/**
 * Implements hook_mailkeys().
 */
function ulf_pretix_mailkeys() {
  return [
    Mailer::PRETIX_EVENT_ORDER_PAID_TEMPLATE => t('Mail sent when a pretix order has been created.'),
    Mailer::PRETIX_EVENT_ORDER_CANCELED_TEMPLATE => t('Mail sent when a pretix order has been canceled.'),
  ];
}

/**
 * Implements hook_mail_edit_text().
 */
function ulf_pretix_mail_edit_text($mailkey, $language) {
  $template = Mailer::getMailTemplate($mailkey, $language);
  if (NULL !== $template) {
    $template['always'] = TRUE;
  }

  return $template;
}

/**
 * Implements hook_mail_edit_token_types().
 */
function ulf_pretix_mail_edit_token_types() {
  return ['pretix_order'];
}

/**
 * Implements hook_token_info().
 */
function ulf_pretix_token_info() {
  return [
    'types' => [
      'ulf_pretix' => [
        'name' => t('Ulf pretix'),
      ],
    ],
    'tokens' => [
      'ulf_pretix' => [
        'pretix_order' => [
          'name' => t('pretix order'),
          'description' => t('Details on the pretix order.'),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function ulf_pretix_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  if ('pretix_order' === $type && !empty($data['pretix_order'])) {
    $order = $data['pretix_order'];
    $questions = $data['pretix_questions'];
    $lines = array_values($data['pretix_order_lines']);
    foreach ($tokens as $name => $original) {

      $value = NULL;
      if ('lines:count' === $name) {
        $value = count($lines);
      }
      elseif (preg_match('/^lines:(?P<index>\d+):availability$/', $name, $matches)) {
        $index = (int) $matches['index'];
        $line = $lines[$index];
        $values = [];
        foreach ($line->quotas as $quota) {
          $values[] = t('@available_number of @total_size', [
            '@available_number' => $quota->availability->available_number,
            '@total_size' => $quota->availability->total_size,
          ]);
        }
        $value = implode('; ', $values);
      }
      elseif (preg_match('/^lines:(?P<index>\d+):quotas:count$/', $name, $matches)) {
        $index = (int) $matches['index'];
        $value = count($lines[$index]->quotas ?? []);
      }
      elseif (preg_match('/^lines:(?P<index>\d+):questions$/', $name, $matches)) {
        $index = (int) $matches['index'];
        $line = $lines[$index];
        $values = [];

        foreach ($line->answers as $answer) {
          $values[] = t(
            '@question' . "\r\n" . '@answer' , [
            '@question' => $questions[$answer->question],
            '@answer' => $answer->answer,
          ]);
        }

        if(isset($values)) {
          $value = "\r\n\r\n" . implode("\r\n\r\n", $values)  . "\r\n";
        }
      }
      elseif (preg_match('/^lines:(?P<index>\d+):(?P<key>[^|]+)(?:\\|(?P<format>.+))?$/', $name, $matches)) {
        $index = (int) $matches['index'];
        $key = $matches['key'];
        $format = $matches['format'] ?? NULL;
        if (isset($lines[$index]->{$key})) {
          $value = $lines[$index]->{$key};
        }
        if ('name' === $key) {
          $value = $value['da'] ?? $value['en'];
        }
        if (NULL !== $format) {
          if ($value instanceof \DateTime && preg_match('/^date\\(.(?P<format>.+).\\)$/', $format, $matches)) {
            try {
              $value = $value->format($matches['format']);
            }
            catch (\Exception $exception) {

            }
          }
          elseif (is_numeric($value) && preg_match('/^number_format\\(
                                                   (?P<decimals>\d+)             # number of decimals
                                                   (?:                           # number_format accept 1, 2 or 4 arguments.
                                                   \s*,\s*.(?P<dec_point>.).     # decimal point
                                                   \s*,\s*.(?P<thousands_sep>.). # thousands separator
                                                   )?
                                                   \\)$/x', $format, $matches)) {
            $decimals = (int) $matches['decimals'];
            $dec_point = $matches['dec_point'] ?? '.';
            $thousands_sep = $matches['thousands_sep'] ?? ',';
            $value = number_format($value, $decimals, $dec_point, $thousands_sep);
          }
        }
      }

      if (NULL !== $value) {
        $replacements[$original] = $value;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_search_node_filtered_item_alter().
 */
function ulf_pretix_search_node_filtered_item_alter(&$filteredItem) {
  if (isset($filteredItem['nid'])) {
    $node = node_load($filteredItem['nid']);
    if (isset($node->pretix['data']['available']) && FALSE === $node->pretix['data']['available']) {
      $filteredItem['ribbon_message'] = t('Sold out');
      $filteredItem['ribbon_class_names'] = ['warning'];
    }
  }
}

/**
 * Turn off Pretix on cloned nodes.
 *
 * @param $data
 * @param $context
 */
function ulf_pretix_clone_node_alter(&$data, $context) {
  if($context['original_node']->type === 'course' || $context['original_node']->type === 'course-educators') {
    $data->field_pretix_enable['und']['0']['value'] = FALSE;
    $data->field_pretix_show_widget_from = [];
    $data->field_pretix_synchronize['und']['0']['value'] = TRUE;
    $data->field_pretix_date = [];
    $data->field_pretix_email_recipient = [];
  }
}
