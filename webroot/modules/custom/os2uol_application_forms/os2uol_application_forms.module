<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\domain\Entity\Domain;
use Drupal\os2uol_domain\Os2uolDomain;
use Drupal\views\ViewExecutable;
use Drupal\Core\Render\Markup;
use Psr\Log\LoggerInterface;

/**
 * Implements hook_node_presave().
 *
 * Alters the author of a node before it is saved, specifically for nodes of
 * type "free_course_request". The new author is determined by the user ID
 * stored in the "field_rfc_school" field. Additionally, it updates the
 * "field_rfc_latest_editor" field with the ID of the user who last edited the
 * node.
 *
 * Also updates the "field_semester" field based on the "Afviklingsdato".
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function os2uol_application_forms_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  // Ensure we are dealing with a node entity and the node type is "free_course_request".
  if (
    $entity instanceof \Drupal\node\NodeInterface &&
    ($entity->bundle() === 'free_course_request' || $entity->bundle() === 'theater_refund')
  ) {
    // Update the node author if "field_rfc_school" is set.
    if ($entity->hasField('field_rfc_school') && !$entity->get('field_rfc_school')->isEmpty()) {
      // Get the target_id from "field_rfc_school".
      $new_author_id = $entity->get('field_rfc_school')->target_id;

      // Load the user entity using the retrieved target_id.
      $new_author = \Drupal\user\Entity\User::load($new_author_id);

      // Check if the user entity was successfully loaded.
      if ($new_author) {
        // Set the node's author to the loaded user.
        $entity->setOwner($new_author);
      }
    }

    // Update the "field_rfc_latest_editor" with the current user ID.
    if ($entity->hasField('field_rfc_latest_editor')) {
      // Get the current user ID.
      $current_user_id = \Drupal::currentUser()->id();

      // Set the "field_rfc_latest_editor" field to the current user ID.
      $entity->set('field_rfc_latest_editor', $current_user_id);
    }

    // Update the "field_semester" based on "Afviklingsdato".
    if ($entity->hasField('field_semester') && !$entity->get('field_rfc_date')->isEmpty()) {
      // Get the date value from "field_rfc_date".
      $afviklingsdato = $entity->get('field_rfc_date')->date;

      // Calculate the semester and school year dynamically.
      $calculated_semester = calculateSemesterMachineName($afviklingsdato->getTimestamp());

      // Set the calculated value to "field_semester".
      $entity->set('field_semester', $calculated_semester);
    }
  }
}

/**
 * Function to calculate the semester and return the machine name.
 *
 * @param string $afviklingsdato
 *   The date of the event (Afviklingsdato) in timestamp format.
 *
 * @return string
 *   Returns the machine-readable value for the semester, e.g., "1_halvar_2025_2026" or "2_halvar_2025_2026".
 */
function calculateSemesterMachineName($afviklingsdato) {
  // Get the timestamp of the given date (Afviklingsdato).
  $event_date = new \DateTime();
  $event_date->setTimestamp($afviklingsdato);

  // Get the year and month of the event.
  $year = $event_date->format('Y');
  $month = $event_date->format('m');

  // Calculate the school year.
  if ($month >= 1 && $month <= 6) {
    // First half of the year (1. halvår)
    $school_year_start = $year - 1; // Previous year.
    $school_year_end = $year; // Current year.
    return '1_halvar_' . $school_year_start . '_' . $school_year_end;
  }
  else {
    // Second half of the year (2. halvår)
    $school_year_start = $year; // Current year.
    $school_year_end = $year + 1; // Next year.
    return '2_halvar_' . $school_year_start . '_' . $school_year_end;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node edit forms.
 *
 * This example demonstrates how to access the node's created date
 * in the node edit form alter function.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The unique string identifying the form.
 */
function os2uol_application_forms_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_free_course_request_edit_form') {
    $node = $form_state->getFormObject()->getEntity();
    $author = $node->getOwner();
    $created_date = $node->getCreatedTime();
    $formatted_created_date = \Drupal::service('date.formatter')
      ->format($created_date, 'custom', 'd/m/Y - H:i');

    // Change author name to field_name.
    $form['meta']['author']['#markup'] = $author->get('field_name')->value;

    // Add published node info in meta section.
    $form['meta']['published'] = [
      '#type' => 'item',
      '#title' => t('Published'),
      '#markup' => $formatted_created_date,
      '#wrapper_attributes' => [
        'class' => ['entity-meta__published'],
      ],
    ];

    // Hide the time part of the date fields.
    $form['field_rfc_payment_date']['widget'][0]['value']['#date_time_element'] = 'none';
    $form['field_rfc_payment_date']['widget'][0]['value']['#date_time_format'] = '';
    $form['field_rfc_follow_up_mail_sent']['widget'][0]['value']['#date_time_element'] = 'none';
    $form['field_rfc_follow_up_mail_sent']['widget'][0]['value']['#date_time_format'] = '';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function os2uol_application_forms_views_pre_render(ViewExecutable $view) {
  // Check if the view matches the required IDs.
  if (in_array($view->id(), ['free_course_request', 'theater_refund', 'transport_applications'])) {
    // Initialize sums for non-transport forms.
    $requested_amount = 0;
    $granted_amount = 0;
    $spent_amount = 0;

    // Initialize sums for transport_pool_form.
    $transport_spent = 0;

    // Use the current view configuration.
    $temp_view = \Drupal\views\Views::getView($view->id());
    $temp_view->setDisplay($view->current_display); // Match the current display.
    $temp_view->setItemsPerPage(0); // Disable pagination.
    $temp_view->execute(); // Execute and fetch all results.

    // Process results.
    foreach ($temp_view->result as $row) {
      $entity = $row->_entity; // Access the entity directly.

      // Detect the content type.
      $type = $entity->bundle();

      if ($type === 'transport_pool_form') {
        // Sum up field_tpf_expense for transport forms.
        $transport_spent += $entity->get('field_tpf_expense')->value ?? 0;
      }
      else {
        // Default case for other types.
        $requested_amount += $entity->get('field_rfc_requested_amount')->value ?? 0;
        $granted_amount += $entity->get('field_rfc_granted_amount')->value ?? 0;
        $spent_amount += $entity->get('field_rfc_spent_amount')->value ?? 0;
      }
    }

    // Create summary markup for non-transport forms.
    if ($view->id() !== 'transport_applications') {
      $sum_markup_general = Markup::create(
        '<table class="applications-summary">' .
        '<tr><td class="applications-summary__label">Ansøgt sum: </td><td class="applications-summary__value">' . number_format($requested_amount, 2, ',', '.') . ' kr.</td></tr>' .
        '<tr><td class="applications-summary__label">Bevilget sum: </td><td class="applications-summary__value">' . number_format($granted_amount, 2, ',', '.') . ' kr.</td></tr>' .
        '<tr><td class="applications-summary__label">Forbrugt sum: </td><td class="applications-summary__value">' . number_format($spent_amount, 2, ',', '.') . ' kr.</td></tr>' .
        '</table>'
      );

      // Attach the general summary only for non-transport views.
      $view->attachment_before['sum_markup_general'] = [
        '#markup' => $sum_markup_general,
        '#weight' => -10, // Ensure it appears before other elements.
      ];
    }

    // Create summary markup for transport forms only on transport_applications view.
    if ($view->id() === 'transport_applications') {
      $sum_markup_transport = Markup::create(
        '<table class="applications-summary-transport">' .
        '<tr><td class="applications-summary__label">Transport sum: </td><td class="applications-summary__value">' . number_format($transport_spent, 2, ',', '.') . ' kr.</td></tr>' .
        '</table>'
      );

      // Attach the transport summary only for the transport_applications view.
      $view->attachment_before['sum_markup_transport'] = [
        '#markup' => $sum_markup_transport,
        '#weight' => -10, // Appears before other elements.
      ];
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function os2uol_application_forms_preprocess_views_view(&$variables) {
  if ($variables['view']->id() == 'free_course_request' || $variables['view']->id() == 'theater_refund' || $variables['view']->id() == 'transport_applications') {
    $variables['#attached']['library'][] = 'os2uol_application_forms/views';
  }
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function os2uol_application_forms_locale_translation_projects_alter(&$projects) {
  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('os2uol_application_forms')->getPath();
  $projects['os2uol_application_forms']['info']['interface translation server pattern']
    = $path . '/translations/%language.po';
}

/**
 * Implements hook_cron().
 */
function os2uol_application_forms_cron() {
  // Call the GDPR anonymization logic during cron runs.
  os2uol_application_forms_gdpr_anonymization_cron();
}

/**
 * Anonymizes personal data fields in a safe manner.
 */
function os2uol_application_forms_gdpr_anonymization_cron() {
  $logger = \Drupal::logger('os2uol_application_forms');

  $logger->info('GDPR Anonymization cron started.');

  // Get domains list
  $domains = \Drupal::entityTypeManager()->getStorage('domain')->loadMultiple();

  /** @var \Drupal\domain\Entity\Domain $domain */
  foreach ($domains as $domain) {
    // Skip main domain, since every form is assigned to default domain.
    if ($domain->id() == Os2uolDomain::DEFAULT_DOMAIN_ID) {
      continue;
    }

    os2uol_application_forms_anonymize_data($logger, $domain);
  }
}


/**
 * Anonymizes personal data fields in a safe manner for a specific domain.
 */
function os2uol_application_forms_anonymize_data(LoggerInterface $logger, Domain $domain) {
  /** @var \Drupal\os2uol_domain\DomainConfigHelper $config_helper */
  $config_helper = \Drupal::service('os2uol_domain.config_helper');

  $config = $config_helper->getDomainConfig('os2uol_application_forms.gdpr_settings', $domain, Drupal::languageManager()->getDefaultLanguage());

  $anonymization_days = $config->get('anonymization_days');

  // Calculate the cutoff date for anonymization.
  $cutoff_date = new \Drupal\Core\Datetime\DrupalDateTime('-' . $anonymization_days . ' days');

  // Query to get nodes that need anonymization based on Afviklingsdato.
  $query = \Drupal::entityQuery('node')
    ->condition('type', ['free_course_request', 'theater_refund', 'transport_pool_form'], 'IN')
    ->condition('field_rfc_date', $cutoff_date->format('Y-m-d'), '<=')
    ->condition('field_domain_access', $domain->id()) // Only nodes for the current domain
    ->accessCheck(FALSE); // Disable access checks for cron job

  // Only non-anonymized data, add check for NULL values as well.
  // This is needed due to field not being populated when node is created via REST API.
  $anonymized_check = $query->orConditionGroup()
    ->condition('field_data_anonymized', '1', '!=')
    ->condition('field_data_anonymized', NULL, 'IS NULL');

  $query->condition($anonymized_check);

  $nids = $query->execute();

  if (!empty($nids)) {
    $logger->info('Nodes found for anonymization: @nids', ['@nids' => implode(',', $nids)]);

    // Get the storage handler for nodes and ensure it is cast as RevisionableStorageInterface.
    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $node_storage */
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');

    foreach ($nids as $nid) {
      $node = $node_storage->load($nid);

      // Generate a unique anonymized identifier (UUID-like).
      $random_id = substr(hash('sha256', uniqid(rand(), TRUE)), 0, 8);

      // Generate a fake email address.
      $fake_email = 'anon_' . $random_id . '@anon.invalid';

      // Anonymize personal data fields with safe values.
      $node->set('field_rfc_mail', $fake_email);
      $node->set('field_mailto', $fake_email);
      $node->set('field_rfc_name', 'Anonymous User ' . $random_id); // Clearly fake and unique.

      if ($node->hasField('field_rfc_phone')) {
        $node->set('field_rfc_phone', '00000000'); // Fake, non-real phone number.
      }

      // Mark as anonymized.
      $node->set('field_data_anonymized', '1');

      // Save the revision.
      $node->save();

      // Log the operation.
      $logger->info('Personal data anonymized for node ID ' . $node->id());

      $revisions = $node_storage->revisionIds($node);
      $default_revision = $node->getRevisionId();

      // Remove all revisions
      foreach ($revisions as $revision_id) {
        // Skip default revision
        if ($revision_id == $default_revision) {
          continue;
        }

        $node_storage->deleteRevision($revision_id);
      }
    }
    $logger->info('Anonymization completed for ' . count($nids) . ' nodes.');
  }
  else {
    $logger->info('No nodes found for anonymization.');
  }
}

/**
 * Implements hook_entity_presave().
 */
function os2uol_application_forms_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // Update the field_rfc_payment_date with the current timestamp when the moderation state is changed to published.
  if ($entity instanceof \Drupal\node\Entity\Node && $entity->hasField('field_rfc_payment_date')) {
    // Check if the moderation state is being changed to published.
    $original_entity = $entity->original;
    if ($original_entity && $original_entity->get('moderation_state')->getString() !== 'published' && $entity->get('moderation_state')->getString() === 'published') {
      // Update the field_rfc_payment_date with the current timestamp.
      $current_timestamp = time();
      $entity->set('field_rfc_payment_date', $current_timestamp);
    }
  }
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 */
function os2uol_application_forms_content_moderation_notification_mail_data_alter(EntityInterface $entity, array &$data) {
  // Dynamically set the Reply-To header based on workflow type.
  os2uol_application_forms_set_reply_to($entity, $data);
    // Check if the entity has the field_rfc_send_mail field.
  if ($entity->hasField('field_rfc_send_mail')) {
    $send_mail = $entity->get('field_rfc_send_mail')->getString();
    $status = $entity->get('moderation_state')->getString();

    // Always allow emails for the "draft" state.
    if ($status === 'draft') {
      return; // Do not modify $data for draft notifications.
    }

    // Block email if send_mail is false.
    if (!$send_mail) {
      $data['to'] = [];
    } else {
      // Ensure notifications are sent only for configured states.
      if (!in_array($status, ['accepted', 'refused'])) {
        $data['to'] = [];
      }
    }
  }

  // Add guest user's email from field_rfc_mail.
  if ($entity->hasField('field_rfc_mail')) {
    $guest_email = $entity->get('field_rfc_mail')->getString();
    if (!empty($guest_email)) {
      $data['to'][] = $guest_email;
      \Drupal::logger('os2uol_application_forms')->info('Notification email added for guest user: @guest_email.', [
        '@guest_email' => $guest_email,
      ]);
    } else {
      \Drupal::logger('os2uol_application_forms')->warning('Guest email field_rfc_mail is empty, notification not sent.');
    }
  }
}

/**
 * Sets the Reply-To header dynamically based on workflow type.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity for which the email is being processed.
 * @param array &$data
 *   The email data array to be modified.
 */
function os2uol_application_forms_set_reply_to(EntityInterface $entity, array &$data) {
  // Fetch the workflow type associated with the entity.
  $workflow_type = $entity->get('moderation_state')->getFieldDefinition()->getSetting('workflow');

  // Check if the entity has the required fields for the application workflow.
  if ($workflow_type === 'application' && $entity->hasField('field_mailto')) {
    // Use the value of the field_mailto field as the Reply-To address.
    $mailto = $entity->get('field_mailto')->getString();
    if (!empty($mailto)) {
      $data['headers']['Reply-To'] = $mailto;
      \Drupal::logger('os2uol_application_forms')->info('Reply-To set to @mailto for application workflow.', [
        '@mailto' => $mailto,
      ]);
    } else {
      \Drupal::logger('os2uol_application_forms')->warning('Reply-To not set for application workflow because field_mailto is empty.');
    }
  }
  // For editorial workflow, use the site email.
  elseif ($workflow_type === 'editorial') {
    $site_mail = \Drupal::config('system.site')->get('mail');
    if (!empty($site_mail)) {
      $data['headers']['Reply-To'] = $site_mail;
      \Drupal::logger('os2uol_application_forms')->info('Reply-To set to @site_mail for editorial workflow.', [
        '@site_mail' => $site_mail,
      ]);
    } else {
      \Drupal::logger('os2uol_application_forms')->warning('Reply-To not set for editorial workflow because site mail is empty.');
    }
  } else {
    \Drupal::logger('os2uol_application_forms')->error('Workflow type @workflow_type is not handled.', [
      '@workflow_type' => $workflow_type,
    ]);
  }
}

/**
 * Implements hook_mail_alter().
 */
function os2uol_application_forms_mail_alter(&$message) {
  // Drupal hardcodes all mail header as 'text/plain' so we need to set the
  // header's 'Content-type' to HTML if the EmailWebformHandler's
  // 'html' flag has been set.
  // @see \Drupal\Core\Mail\MailManager::mail()
  // @see \Drupal\webform\Plugin\WebformHandler\EmailWebformHandler::getMessage().
  if (str_starts_with($message['id'], 'content_moderation_notifications')) {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
}

/**
 * Implements hook_node_access().
 *
 * Restrict editing access to certain moderation states for "Skole" and
 * "Institution" roles.
 */
function os2uol_application_forms_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  // Check if this is an application node and the operation is 'update' (edit).
  if ($node->getType() === 'application' && $op === 'update') {
    // Get the moderation state of the application.
    if ($node->hasField('moderation_state')) {
      $moderation_state = $node->get('moderation_state')->value;

      // Define the states that should restrict editing.
      $restricted_states = [
        'ready_for_payment',
        'published',
        'refused',
      ];

      // Check if the current user has the 'Skole' or 'Institution' role.
      if ($account->hasRole('school') || $account->hasRole('institution')) {
        // If the application is in a restricted state, deny edit access.
        if (in_array($moderation_state, $restricted_states)) {
          return \Drupal\Core\Access\AccessResult::forbidden();
        }
      }
    }
  }

  // Return neutral result if no restrictions apply.
  return \Drupal\Core\Access\AccessResult::neutral();
}
