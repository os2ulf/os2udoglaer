<?php

use Drupal\Core\Render\BubbleableMetadata;

/**
 * Define available fonts for the OS2UOL settings.
 */
function os2uol_settings_get_available_fonts(): array {
  return [
    'Arial' => 'Arial',
    'Montserrat' => 'Montserrat',
    'Muli' => 'Muli',
    'Open Sans' => 'Open Sans',
    'Roboto' => 'Roboto',
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for styles_preview.
 */
function os2uol_settings_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'styles_preview') {
    $suggestions[] = $hook . '__' . 'custom' . '__' . $variables['elements']['#collection'];
  }
}

/**
 * Implements hook_theme() for OS2UOL settings.
 */
function os2uol_settings_theme($existing, $type, $theme, $path) {
  return [
    'styles_preview__custom__color_theme' => [
      'base hook' => 'styles_preview',
      'path' => $path . '/templates',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for styles_preview.
 */
function os2uol_settings_preprocess_styles_preview(&$variables) {
  if ($variables['collection'] === 'color_theme') {
    $config = \Drupal::config('os2uol_settings.settings');
    $primary_bg_color = $config->get('primary_background_color');
    $primary_bg_txt_color = $config->get('primary_background_text_color');
    $secondary_bg_color = $config->get('secondary_background_color');
    $secondary_bg_txt_color = $config->get('secondary_background_text_color');

    if ($variables['style'] === 'theme-primary' && !empty($primary_bg_color) && !empty($primary_bg_txt_color)) {
      $variables['primary_bg_color'] = $primary_bg_color;
      $variables['primary_bg_txt_color'] = $primary_bg_txt_color;
    }

    if ($variables['style'] === 'theme-secondary' && !empty($secondary_bg_color) && !empty($secondary_bg_txt_color)) {
      $variables['secondary_bg_color'] = $secondary_bg_color;
      $variables['secondary_bg_txt_color'] = $secondary_bg_txt_color;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function os2uol_settings_preprocess_html(array &$variables) {
  // Initialize an array to hold CSS variables.
  $css_variables = [];

  // Fetch global theme color settings.
  $config = \Drupal::config('os2uol_settings.settings');
  $primary_bg_color = $config->get('primary_background_color');
  $primary_bg_txt_color = $config->get('primary_background_text_color');
  $secondary_bg_color = $config->get('secondary_background_color');
  $secondary_bg_txt_color = $config->get('secondary_background_text_color');

  // Create an array of CSS variable declarations.
  if ($primary_bg_color && $primary_bg_txt_color) {
    $css_variables[] = ".theme-primary {
    --theme-background-color: {$primary_bg_color};
    --theme-color: {$primary_bg_txt_color};
    --theme-button-color: {$primary_bg_color};
    --theme-link-color: {$primary_bg_txt_color};
    --theme-divider-background-color: {$primary_bg_txt_color};
    --theme-accordion-border-color: {$primary_bg_color};
    --theme-accordion-background-color: {$primary_bg_color};
    --theme-accordion-text-color: {$primary_bg_txt_color};
    --theme-input-border: {$primary_bg_txt_color};
    --theme-input-color-marked: {$primary_bg_txt_color};
    }";
  }
  if ($secondary_bg_color && $secondary_bg_txt_color) {
    $css_variables[] = ".theme-secondary {
    --theme-background-color: {$secondary_bg_color};
    --theme-color: {$secondary_bg_txt_color};
    --theme-button-color: {$secondary_bg_color};
    --theme-link-color: {$secondary_bg_txt_color};
    --theme-divider-background-color: {$secondary_bg_txt_color};
    --theme-accordion-border-color: {$secondary_bg_color};
    --theme-accordion-background-color: {$secondary_bg_color};
    --theme-accordion-text-color: {$secondary_bg_txt_color};
    --theme-input-border: {$secondary_bg_txt_color};
    --theme-input-color-marked: {$secondary_bg_txt_color};
    }";
  }

  // Join the array into a string of CSS variables.
  $css_variable_string = ':root { ' . implode(' ', $css_variables) . ' }';

  // Attach the CSS variables to the <head> of the page.
  $variables['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => $css_variable_string,
    ],
    'global_css_variables',
  ];
}

/**
 * Implements hook_token_info().
 */
function os2uol_settings_token_info() {
  $info = array();

  // Define a new group of tokens.
  $info['types']['os2uol_settings'] = array(
    'name' => t('OS2UOL Settings'),
    'description' => t('Tokens for OS2UOL settings.'),
  );

  // Define tokens in the group.
  $info['tokens']['os2uol_settings'] = array(
    'email_signature' => array(
      'name' => t('Email Signature'),
      'description' => t('The HTML email signature from the configuration.'),
    ),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function os2uol_settings_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'os2uol_settings') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'email_signature':
          $email_signature_service = \Drupal::service('os2uol_settings.email_signature_token_service');
          $replacements[$original] = $email_signature_service->getEmailSignature();
          break;
      }
    }
  }

  return $replacements;
}
