<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\os2uol_domain\DomainConfigHelper;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\content_moderation_notifications\Entity\ContentModerationNotification;
use Drupal\domain\Entity\Domain;

/**
 * Implements hook_cron().
 * Runs the moderation process.
 */
function os2uol_moderation_cron() {
  \Drupal::service('os2uol_moderation.moderation_service')->processModeration();
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 */
function os2uol_moderation_content_moderation_notification_mail_data_alter(EntityInterface $entity, array &$data) {
  // Get the workflow associated with the entity.
  $workflow = \Drupal::service('content_moderation.moderation_information')->getWorkflowForEntity($entity);
  if ($workflow->id() !== 'application') {
    return;
  }

  // Use the DomainConfigHelper to fetch domain-specific configuration.
  $config_helper = \Drupal::service('os2uol_domain.config_helper');
  $domain = \Drupal::service('domain.negotiator')->getActiveDomain();

  // Validate that a valid domain was retrieved.
  if (!$domain) {
    \Drupal::logger('os2uol_moderation')->error('Unable to load the active domain.');
    return;
  }

  // Fetch the domain-specific configuration.
  $domain_config = $config_helper->getDomainConfig('os2uol_settings.settings', $domain);

  // Log the domain config for debugging purposes.
  \Drupal::logger('os2uol_moderation')->info('Using domain config: @config for domain: @domain_id', [
    '@config' => print_r($domain_config->getRawData(), TRUE),
    '@domain_id' => $domain->id(),
  ]);

  // Default fallback email address.
  $fallback_email = 'fallback@os2udoglaer.dk';

  // Retrieve the configured "From" and "Reply-To" email for the active domain.
  $from_email = $domain_config->get('from_reply_to_email') ?: $fallback_email;
  $reply_to_email = $domain_config->get('from_reply_to_email') ?: $fallback_email;

  // Log the resolved emails for debugging purposes.
  \Drupal::logger('os2uol_moderation')->info('Resolved From and Reply-To emails: From: @from, Reply-To: @reply_to for domain: @domain_id', [
    '@from' => $from_email,
    '@reply_to' => $reply_to_email,
    '@domain_id' => $domain->id(),
  ]);

  // Set the "From", "Reply-To", and "Return-Path" headers.
  $data['headers']['From'] = $from_email;
  $data['headers']['Reply-To'] = $reply_to_email;
  $data['headers']['Return-Path'] = $reply_to_email;

  // Log the selected emails for debugging purposes.
  \Drupal::logger('os2uol_moderation')->info('Using From and Reply-To addresses: @from, @reply_to for domain: @domain_id', [
    '@from' => $from_email,
    '@reply_to' => $reply_to_email,
    '@domain_id' => $domain->id(),
  ]);
}

/**
 * Implements hook_views_query_alter().
 */
function os2uol_moderation_views_query_alter($view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  // Target the specific view and display.
  if ($view->id() === 'workbench_recent_content' && $view->current_display === 'embed_1') {
    // Ensure the query is SQL-based.
    if ($query instanceof \Drupal\views\Plugin\views\query\Sql) {
      // Add an explicit WHERE clause to exclude "trash" moderation state.
      $query->addWhereExpression(0, "
        NOT EXISTS (
          SELECT 1
          FROM {content_moderation_state_field_data} cms
          WHERE cms.content_entity_id = node_field_data.nid
            AND cms.moderation_state = 'trash'
        )
      ");
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function os2uol_moderation_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['content_moderation_notification'])) {
    $entity_types['content_moderation_notification']->setClass(
      'Drupal\os2uol_moderation\Entity\ContentModerationNotification'
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function os2uol_moderation_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id === 'content_moderation_notification_edit_form' || $form_id === 'content_moderation_notification_add_form') {
    \Drupal::logger('os2uol_moderation')->info('Processing form alter for @form_id.', ['@form_id' => $form_id]);

    // Check if the form has an entity.
    if (!isset($form['#entity'])) {
      $route_match = \Drupal::routeMatch();
      $entity = $route_match->getParameter('content_moderation_notification');
      if ($entity && $entity instanceof \Drupal\os2uol_moderation\Entity\ContentModerationNotification) {
        $form['#entity'] = $entity;
      } else {
        \Drupal::logger('os2uol_moderation')->error('No valid entity found for the form.');
        return;
      }
    }

    /** @var \Drupal\os2uol_moderation\Entity\ContentModerationNotification $entity */
    $entity = $form['#entity'];

    // Load domains.
    $domains = \Drupal::entityTypeManager()->getStorage('domain')->loadMultiple();
    $domain_options = [];
    foreach ($domains as $domain) {
      $domain_options[$domain->id()] = $domain->label();
    }

    // Add the domain dropdown to the form.
    $form['domain'] = [
      '#type' => 'select',
      '#title' => t('Domain'),
      '#options' => $domain_options,
      '#default_value' => $entity->getDomain(),
      '#description' => t('Select a domain for this notification.'),
      '#required' => FALSE,
      '#weight' => -10,
    ];
  }
}

/**
 * Implements hook_entity_presave().
 */
function os2uol_moderation_entity_presave(EntityInterface $entity) {
  if ($entity instanceof \Drupal\os2uol_moderation\Entity\ContentModerationNotification) {
    \Drupal::logger('os2uol_moderation')->info('Saving domain: @domain', ['@domain' => $entity->getDomain()]);
  }
}
