<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\os2uol_domain\Os2uolDomain;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\UserInterface;

/**
 * implements hook_field_widget_single_element_paragraphs_form_alter().
 */
function os2uol_entity_forms_field_widget_single_element_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Access the form object, which could be the node form.
  $form_object = $form_state->getFormObject();

  // Check if the form object is an instance of NodeForm.
  if ($form_object instanceof \Drupal\node\NodeForm) {
    // Get the node entity.
    $node = $form_object->getEntity();

    // Retrieve the node type.
    $node_type = $node->getType();

    // Retrieve the paragraph type.
    $paragraph_type = $element['#paragraph_type'];

    // Now you can use the node type to conditionally alter the paragraph field.
    if ($node_type == 'internship' && $paragraph_type == 'material') {
      // Disable the field 'field_literature_suggestion'
      $element['subform']['field_literature_suggestion']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function os2uol_entity_forms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach library for jQuery functionality.
  $form['#attached']['library'][] = 'os2uol_entity_forms/field-group-form-alter';
  $form['#attached']['library'][] = 'os2uol_entity_forms/custom-form-alter';

  // Define node add and edit form IDs.
  $node_add_forms = [
    'node_course_form',
    'node_course_educators_form',
    'node_exercise_form',
    'node_internship_form',
    'node_news_form',
    'node_page_form'
  ];

  $node_edit_forms = [
    'node_course_edit_form',
    'node_course_educators_edit_form',
    'node_exercise_edit_form',
    'node_internship_edit_form',
    'node_news_edit_form',
    'node_page_edit_form'
  ];

  // Get the current logged-in user.
  $current_user = \Drupal::currentUser();
  $is_admin_or_webmaster = $current_user->hasRole('administrator') || $current_user->hasRole('webmaster');
  $is_editor = $current_user->hasRole('editor');

  // Check if the form is a node add form.
  if (in_array($form_id, $node_add_forms)) {
    // Set access to the 'field_domain_access' field based on the user role.
    $form['field_domain_access']['#access'] = $is_admin_or_webmaster;

    // If user is not admin or editor or webmaster, hide fields.
    if (!$is_admin_or_webmaster && !$is_editor) {
      $form['field_practical_info_buttons']['#access'] = FALSE;
      $form['field_tpf_who_get_support']['#access'] = FALSE;
    }
  }

  // Check if the form is a node edit form.
  if (in_array($form_id, $node_edit_forms)) {
    // Set access to the 'field_domain_access' field based on the user role.
    $form['field_domain_access']['#access'] = $is_admin_or_webmaster;

    // If user is not admin or editor or webmaster, hide fields.
    if (!$is_admin_or_webmaster && !$is_editor) {
      $form['field_practical_info_buttons']['#access'] = FALSE;
      $form['field_tpf_who_get_support']['#access'] = FALSE;
    }

    if (!$is_admin_or_webmaster) {
      // Handle domain access restrictions for non-admin users.
      $domain_array = $form['field_domain_access']['widget']['#default_value'];

      // Remove default domain from domain_array.
      if (($key = array_search(Os2uolDomain::DEFAULT_DOMAIN_ID, $domain_array)) !== false) {
        unset($domain_array[$key]);
      }

      // Load the node to check the author.
      $node = \Drupal\node\Entity\Node::load($form_state->getFormObject()->getEntity()->id());
      $is_author = ($node->getOwnerId() == $current_user->id());

      // Allow access if the user is the author.
      if ($is_author) {
        return;
      }

      // Set the default domain ID.
      $default_domain_id = Os2uolDomain::DEFAULT_DOMAIN_ID;

      // Modify the filtering logic to exclude only the default domain.
      $filtered_domains = array_filter($domain_array, function($domain) use ($default_domain_id) {
        return $domain !== $default_domain_id;
      });

      // Load current user's domain access field.
      $user = \Drupal\user\Entity\User::load($current_user->id());
      $user_domain_array = array_column($user->get('field_domain_access')->getValue(), 'target_id');

      // Ensure both arrays are properly formatted for comparison.
      $user_domains = array_map('strtolower', array_map('strval', $user_domain_array)); // Cast to string and lowercase for consistency
      $filtered_domains = array_map('strtolower', array_map('strval', $filtered_domains));

      // Check if the user has access to the node's domain(s).
      $node_access = !empty(array_intersect($user_domains, $filtered_domains));

      if (!$node_access) {
        throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException('User does not have access to the content\'s domain.');
      }
    }
  }

  // Check if user is editor and limit access to author field.
  if (in_array($form_id, $node_add_forms) || in_array($form_id, $node_edit_forms)) {
    $user = \Drupal::currentUser();
    $roles = $user->getRoles();

    // Check if the user has the editor role.
    if (in_array('editor', $roles)) {
      // Modify the uid field to use the entity reference view.
      if (isset($form['uid']['widget'][0]['target_id'])) {
        $element = &$form['uid']['widget'][0]['target_id'];
        $element['#selection_handler'] = 'views';
        $element['#selection_settings'] = [
          'view' => [
            'view_name' => 'users_by_domain',
            'display_name' => 'entity_reference_1',
          ],
        ];
      }
    }
  }

  // Define form IDs for course and educator forms.
  $course_form_ids = [
    'node_course_form',
    'node_course_edit_form',
    'node_course_educators_form',
    'node_course_educators_edit_form'
  ];

  // Check if the form is a course or educator form and hide the hours and minutes from the period field.
  if (in_array($form_id, $course_form_ids)) {
    $period_field = &$form['field_period']['widget'][0];
    $period_field['value']['#date_time_element'] = 'none';
    $period_field['value']['#date_time_format'] = '';
    $period_field['end_value']['#date_time_element'] = 'none';
    $period_field['end_value']['#date_time_format'] = '';

    // Hide the time part of the registration deadline date field.
    $registration_deadline_field = &$form['field_registration_deadline']['widget'][0]['value'];
    $registration_deadline_field['#date_time_element'] = 'none';
    $registration_deadline_field['#date_time_format'] = '';
  }

  // Define form IDs for internship forms.
  $internship_form_ids = [
    'node_internship_form',
    'node_internship_edit_form'
  ];

  // Hide the time part of the application deadline date field for internship forms.
  if (in_array($form_id, $internship_form_ids)) {
    $application_deadline_field = &$form['field_application_deadline']['widget'][0]['value'];
    $application_deadline_field['#date_time_element'] = 'none';
    $application_deadline_field['#date_time_format'] = '';
  }

  // If user_register_form or user_form.
  if ($form_id == 'user_register_form' || $form_id == 'user_form') {
    // Get current logged in user.
    $current_user = \Drupal::currentUser();

    //Get edit form user id from url.
    $edit_user = \Drupal::routeMatch()->getParameter('user');

    // Hidden fields for user role editor.
    $editor_hidden_fields = [
      'field_presentation',
      'field_educational_profile',
      'field_intro',
      'field_contact',
      'field_phone',
      'field_mail',
      'field_cvr',
      'field_homepage',
      'field_other_info_description',
      'field_other_info',
      'field_image',
      'field_logo',
      'field_video',
      'field_video_title',
      'field_video_description',
      'field_view_on_map',
      'field_location_street',
      'field_location_name',
      'field_location_zipcode',
      'field_location_city',
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_brancher',
      'field_posibilities',
      'field_postnummer',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role editor.
    if ($current_user->hasRole('editor')) {
      if ($edit_user && $current_user->id() == $edit_user->id()) {
        $form['account']['status']['#access'] = FALSE;
        // Only hide $editor_hidden_fields if editor also have course_provider or corporation role.
        if (!$edit_user->hasRole('course_provider') && !$edit_user->hasRole('corporation')) {
          foreach ($editor_hidden_fields as $field) {
            if (isset($form[$field])) {
              $form[$field]['#access'] = FALSE;
            }
          }
        }
      } elseif ($edit_user && ($edit_user->hasRole('webmaster') || $edit_user->hasRole('editor') || $edit_user->hasRole('administrator') || $edit_user->hasRole('rest_api'))) {
        throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();

      } elseif (($edit_user && $edit_user->hasRole('course_provider')) || ($edit_user && $edit_user->hasRole('place_of_visit'))) {
        $form['field_allocated_budget']['#access'] = FALSE;
        $form['field_guarantee_partner']['#access'] = FALSE;
        $form['field_brancher']['#access'] = FALSE;
        $form['field_posibilities']['#access'] = FALSE;
        $form['field_postnummer']['#access'] = FALSE;
        $form['field_institution_type']['#access'] = FALSE;
        $form['field_private_municipal']['#access'] = FALSE;
        $form['field_district']['#access'] = FALSE;
      } elseif ($edit_user && $edit_user->hasRole('corporation')) {
        $form['field_allocated_budget']['#access'] = FALSE;
      } elseif ($edit_user && $edit_user->hasRole('school')) {
        foreach ($editor_hidden_fields as $field) {
          if (isset($form[$field])) {
            $form[$field]['#access'] = FALSE;
          }
        }
        $form['field_location_street']['#access'] = TRUE;
        $form['field_location_name']['#access'] = TRUE;
        $form['field_location_zipcode']['#access'] = TRUE;
        $form['field_location_city']['#access'] = TRUE;
        $form['field_private_municipal']['#access'] = TRUE;
        $form['field_private_municipal']['widget']['#required'] = TRUE;
        $form['field_district']['#access'] = TRUE;
        $form['field_district']['widget']['#required'] = TRUE;
      } elseif ($edit_user && $edit_user->hasRole('institution')) {
        foreach ($editor_hidden_fields as $field) {
          if (isset($form[$field])) {
            $form[$field]['#access'] = FALSE;
          }
        }
        $form['field_location_street']['#access'] = TRUE;
        $form['field_location_name']['#access'] = TRUE;
        $form['field_location_zipcode']['#access'] = TRUE;
        $form['field_location_city']['#access'] = TRUE;
        $form['field_institution_type']['#access'] = TRUE;
        $form['field_institution_type']['widget']['#required'] = TRUE;
        $form['field_private_municipal']['#access'] = TRUE;
        $form['field_private_municipal']['widget']['#required'] = TRUE;
        $form['field_district']['#access'] = TRUE;
        $form['field_district']['widget']['#required'] = TRUE;
      } elseif ($edit_user && $edit_user->hasRole('theater_contact')) {
        $form['field_allocated_budget']['#access'] = TRUE;
        $form['field_editor_field']['#access'] = TRUE;
        $form['field_bypass_workflow']['#access'] = TRUE;
      }
    }

    // Hidden fields for user role course_provider.
    $course_provider_hidden_fields = [
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_brancher',
      'field_posibilities',
      'field_postnummer',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role course_provider.
    if ($current_user->hasRole('course_provider')) {
      foreach ($course_provider_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }

    // Hidden fields for user role place_of_visit.
    $place_of_visit_hidden_fields = [
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_brancher',
      'field_posibilities',
      'field_postnummer',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role place_of_visit.
    if ($current_user->hasRole('place_of_visit')) {
      foreach ($place_of_visit_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }

    // Hidden fields for user role corporation.
    $corporation_hidden_fields = [
      'field_educational_profile',
      'field_intro',
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role corporation.
    if ($current_user->hasRole('corporation')) {
      foreach ($corporation_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }

    // Hidden fields for user role school.
    $school_hidden_fields = [
      'field_presentation',
      'field_educational_profile',
      'field_intro',
      'field_contact',
      'field_phone',
      'field_mail',
      'field_cvr',
      'field_homepage',
      'field_other_info_description',
      'field_other_info',
      'field_image',
      'field_logo',
      'field_video',
      'field_video_title',
      'field_video_description',
      'field_view_on_map',
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_brancher',
      'field_posibilities',
      'field_postnummer',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role school.
    if ($current_user->hasRole('school')) {
      foreach ($school_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }

    // Hidden fields for user role institution.
    $institution_hidden_fields = [
      'field_presentation',
      'field_educational_profile',
      'field_intro',
      'field_contact',
      'field_phone',
      'field_mail',
      'field_cvr',
      'field_homepage',
      'field_other_info_description',
      'field_other_info',
      'field_image',
      'field_logo',
      'field_video',
      'field_video_title',
      'field_video_description',
      'field_view_on_map',
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_brancher',
      'field_posibilities',
      'field_postnummer',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role institution.
    if ($current_user->hasRole('institution')) {
      foreach ($institution_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }

    // Hidden fields for user role theater_contact.
    $theater_contact_hidden_fields = [
      'field_presentation',
      'field_educational_profile',
      'field_intro',
      'field_contact',
      'field_phone',
      'field_mail',
      'field_cvr',
      'field_homepage',
      'field_other_info_description',
      'field_other_info',
      'field_image',
      'field_logo',
      'field_video',
      'field_video_title',
      'field_video_description',
      'field_view_on_map',
      'field_location_street',
      'field_location_name',
      'field_location_zipcode',
      'field_location_city',
      'field_pretix_enabled',
      'field_pretix_url',
      'field_pretix_api_token',
      'field_pretix_organizer_form',
      'field_pretix_event_form',
      'field_allocated_budget',
      'field_guarantee_partner',
      'field_brancher',
      'field_posibilities',
      'field_postnummer',
      'field_editor_field',
      'field_bypass_workflow',
      'field_institution_type',
      'field_private_municipal',
      'field_district',
    ];

    // Hide fields for user role theater_contact.
    if ($current_user->hasRole('theater_contact')) {
      foreach ($theater_contact_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }
  }

  $node_edit_application_forms = [
    'node_free_course_request_edit_form',
    'node_theater_refund_edit_form',
    'node_transport_pool_form_edit_form'
  ];

  $node_edit_application_hidden_fields = [
    'field_tpf_address_variation',
    'field_data_anonymized',
    'field_rfc_remarks',
    'field_rfc_granted_amount',
    'field_old_id',
    'field_rfc_follow_up_mail_sent',
    'field_semester',
    'field_mailto',
    'field_rfc_send_mail',
    'field_tpf_backend_submission',
    'field_tr_mails_sent',
    'field_rfc_latest_editor',
    'field_rfc_payment_date',
  ];

  if (in_array($form_id, $node_edit_application_forms)) {
    $current_user = \Drupal::currentUser();

    // Check if the user has the school or institution role.
    if ($current_user->hasRole('school') || $current_user->hasRole('institution')) {
      foreach ($node_edit_application_hidden_fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#access'] = FALSE;
        }
      }
    }
  }


  // If "Søg tilskud til transport" or "Søg om refusion af forløbet" is checked, then "Hvem kan få tilskud" is required.
  if (isset($form['field_tpf_who_get_support'])) {
    $form['field_tpf_who_get_support']['widget']['#states'] = [
      'required' => [
        [
          ':input[name="field_practical_info_buttons[show_transport_request]"]' => ['checked' => true],
        ],
        'or',
        [
          ':input[name="field_practical_info_buttons[show_free_course_request]"]' => ['checked' => true],
        ],
      ],
    ];
  }

  // Attach necessary libraries.
  $form['#attached']['library'][] = 'os2uol_entity_forms/field-group-form-alter';
  $form['#attached']['library'][] = 'os2uol_entity_forms/custom-form-alter';

  // Check if the form is the "gratis forløb" node edit form.
  if ($form_id === 'node_free_course_request_edit_form') {
    $node = $form_state->getFormObject()->getEntity();
    $current_user = \Drupal::currentUser();
    $user_roles = $current_user->getRoles();
    $allowed_roles = ['school', 'institution']; // Roles with limited access
    $is_limited_role = !empty(array_intersect($allowed_roles, $user_roles)); // Check if user has a limited role

    // Get the current moderation state.
    $current_state = $node->get('moderation_state')->getString();
    $state_accepted = 'accepted'; // "Godkendt"

    // Fields to be editable in "Accepted" state for limited roles.
    $editable_fields = ['field_rfc_attachment', 'field_rfc_spent_amount'];

    // Form important fields
    $form_fields = ['actions', 'form_token', 'form_id'];

    // If user has limited role and state is "Accepted".
    if ($is_limited_role && $current_state === $state_accepted) {
      foreach ($form as $key => &$element) {
        if (is_array($element) && isset($element['#type'])) {
          // Disable all fields by default except moderation actions.
          if (!in_array($key, $form_fields) && strpos($key, 'moderation_state') === false) {
            $element['#disabled'] = TRUE;
          }
        }
      }

      // Explicitly make the editable fields enabled.
      foreach ($editable_fields as $editable_field) {
        if (isset($form[$editable_field])) {
          $form[$editable_field]['#disabled'] = FALSE;
        }
      }
    }
  }
}

function _domain_access_restrictions() {
  // Get current logged in user.
  $current_user = \Drupal::currentUser();
  // Check if current user is administrator or webmaster and grant access to field_domain_access.
  if ($current_user->hasRole('administrator') || $current_user->hasRole('webmaster')) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Assigns the current domain to a newly created and updated user before saving.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function os2uol_entity_forms_entity_presave(EntityInterface $entity) {
  if ($entity instanceof UserInterface) {
    // Get the current active domain.
    $current_domain = \Drupal::service('domain.negotiator')->getActiveDomain();

    // Check if the user entity has the correct field (field_domain_access) and if the current domain is available.
    if ($current_domain && $entity->hasField('field_domain_access')) {
      // Get the roles assigned to the user.
      $roles = $entity->getRoles();

      // Initialize an array to hold the domain IDs.
      $domain_ids = [];

      // Add the default domain ID.
      $default_domain_id = Os2uolDomain::DEFAULT_DOMAIN_ID;

      // Add the current domain ID.
      if ($default_domain_id !== $current_domain->id()) {
        $domain_ids[] = $current_domain->id();
      }

      // Retrieve the selected domains from the edit form.
      $selected_domains = $entity->get('field_domain_access')->getValue();
      foreach ($selected_domains as $selected_domain) {
        $domain_ids[] = $selected_domain['target_id'];
      }

      // Assign the domains to the user before saving.
      $entity->set('field_domain_access', array_unique($domain_ids));
    }
  }
}
