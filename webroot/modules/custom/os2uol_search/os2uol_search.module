<?php

use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

/**
 * Implements hook_views_pre_build().
 */
function os2uol_search_views_pre_build(\Drupal\views\ViewExecutable $view) {
  if (!empty($view->filter['field_period'])) {
    $query_param_name = $view->filter['field_period']->options['expose']['identifier'];
    $exposed_input = $view->getExposedInput();

    // Add default value to the filter to include all results.
    if (empty($exposed_input[$query_param_name]['min'])) {
      $exposed_input[$query_param_name]['min'] = '00.00.0000';
    }

    $view->setExposedInput($exposed_input);
  }
}

/**
 * Implements hook_HOOK_transform_alter().
 */
function os2uol_search_view_content_search_transform_alter(&$transformation) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $transformation['#view'];

  if (!empty($view->filter['field_period'])) {
    $query_param_name = $view->filter['field_period']->options['expose']['identifier'];

    $exposed_input = $view->getExposedInput()[$query_param_name] ?? [];

    $build = [
      'type' => 'date_range',
      'label' => $view->filter['field_period']->options['expose']['label'],
      'value' => [
        'min' => $exposed_input['min'] ?? '00.00.0000',
        'max' => $exposed_input['max'] ?? '',
      ]
    ];

    $transformation['exposed_filters'][$query_param_name] = $build;

    $replacement_found = FALSE;

    foreach ($transformation['facets'] as $facet_id => $facet_build) {
      /** @var \Drupal\facets\Entity\Facet $facet */
      $facet = $facet_build['#facet'];

      if ($facet->getFieldIdentifier() == 'field_period') {
        $transformation['facets'][$facet_id] = [
          'type' => 'facet',
          'facet_type' => 'exposed_filter',
          'exposed_filter' => $query_param_name,
        ];

        $replacement_found = TRUE;
        break;
      }
    }

    if (!$replacement_found) {
      Drupal::logger('os2uol_search')->error('Could not find facet placeholder for exposed filter: @filter in view: @view, display: @display', [
        '@filter' => $query_param_name,
        '@view' => $view->id(),
        '@display' => $view->current_display,
      ]);
    }
  }
}

/**
 * Implements hook_HOOK_transform_alter().
 */
function os2uol_search_view_related_content_transform_alter(&$transformation) {
  // Remove course filter option form exposed filter
  // This is done to keep default filtering working, while frontend option is removed.
  foreach ($transformation['exposed_filters']['type']['options'] as $key => $option) {
    if ($option->value === 'course') {
      unset($transformation['exposed_filters']['type']['options'][$key]);
    }
  }
}

/**
 * Implements hook_transform_alter().
 */
function os2uol_search_view_transform_alter(&$transformation) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $transformation['#view'];

  $extender = $view->getDisplay()->getExtenders()['os2uol_search'] ?? NULL;

  if ($extender === NULL) {
    return;
  }

  $result_string = $extender->options['os2uol_search_result_string'] ?? '';

  if (empty($result_string)) {
    return;
  }

  // Replace the default result string with the custom one.
  $result_string = str_replace('@count', $view->total_rows, $result_string);

  $transformation['result_string'] = $result_string;
}

/**
 * Implements hook_facet_transform_alter().
 */
function os2uol_search_facet_transform_alter(array &$transformation) {
  /** @var \Drupal\facets\Entity\Facet|null $facet */
  $facet = $transformation['#facet'] ?? NULL;

  if ($facet == NULL) {
    return;
  }

  $processors = $facet->getProcessors(TRUE) ?? [];

  $transformation['hidden'] = FALSE;

  foreach ($processors as $processor) {
    if ($processor->getPluginId() === 'hidden_attribute_processor') {
      $transformation['hidden'] = TRUE;
      return;
    }
  }
}
